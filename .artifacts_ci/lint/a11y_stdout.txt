
> lint
> next lint --format json --output-file ../.artifacts_ci/lint/a11y.json

   The output file has been created: /Users/rsternke/permit-school/permit-school/.artifacts_ci/lint/a11y.json
[{"filePath":"/Users/rsternke/permit-school/permit-school/web/src/app/admin/audit/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAuditLogs'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [page, rowsPerPage, filters, fetchAuditLogs]","fix":{"range":[1904,1932],"text":"[page, rowsPerPage, filters, fetchAuditLogs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Paper,\n  Typography,\n  Stack,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Box,\n  CircularProgress,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Grid,\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Tooltip,\n  Divider,\n} from \"@mui/material\";\nimport { Visibility, CheckCircle, Error } from \"@mui/icons-material\";\nimport AppBar from \"@/components/AppBar\";\n\ninterface AuditLog {\n  id: number;\n  actor_user_id: string;\n  actor_role: string;\n  action: string;\n  object_table: string;\n  object_id: string;\n  before: any;\n  after: any;\n  ip: string;\n  user_agent: string;\n  created_at: string;\n  signature: string;\n  signature_valid: boolean;\n}\n\ninterface AuditResponse {\n  audit_logs: AuditLog[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    total_pages: number;\n  };\n  filters: {\n    action: string | null;\n    object_table: string | null;\n    actor_user_id: string | null;\n    start_date: string | null;\n    end_date: string | null;\n  };\n}\n\nexport default function AdminAuditPage() {\n  const [auditData, setAuditData] = useState<AuditResponse | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedLog, setSelectedLog] = useState<AuditLog | null>(null);\n  const [showDiffDialog, setShowDiffDialog] = useState(false);\n  \n  // Filters\n  const [filters, setFilters] = useState({\n    action: \"\",\n    object_table: \"\",\n    actor_user_id: \"\",\n    start_date: \"\",\n    end_date: \"\"\n  });\n  \n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(50);\n\n  useEffect(() => {\n    fetchAuditLogs();\n  }, [page, rowsPerPage, filters]);\n\n  const fetchAuditLogs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const params = new URLSearchParams({\n        page: (page + 1).toString(),\n        limit: rowsPerPage.toString()\n      });\n      \n      // Add filters\n      if (filters.action) params.append('action', filters.action);\n      if (filters.object_table) params.append('object_table', filters.object_table);\n      if (filters.actor_user_id) params.append('actor_user_id', filters.actor_user_id);\n      if (filters.start_date) params.append('start_date', filters.start_date);\n      if (filters.end_date) params.append('end_date', filters.end_date);\n      \n      const response = await fetch(`/api/admin/audit?${params}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setAuditData(data);\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Failed to load audit logs');\n      }\n    } catch (err) {\n      setError('Failed to load audit logs');\n      console.error('Audit logs error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFilterChange = (field: string, value: string) => {\n    setFilters(prev => ({ ...prev, [field]: value }));\n    setPage(0); // Reset to first page when filters change\n  };\n\n  const handlePageChange = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleViewDiff = (log: AuditLog) => {\n    setSelectedLog(log);\n    setShowDiffDialog(true);\n  };\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'INSERT': return 'success';\n      case 'UPDATE': return 'warning';\n      case 'DELETE': return 'error';\n      case 'USER_DELETION': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const formatJson = (data: any) => {\n    if (!data) return 'null';\n    try {\n      return JSON.stringify(data, null, 2);\n    } catch {\n      return String(data);\n    }\n  };\n\n  if (loading && !auditData) {\n    return (\n      <>\n        <AppBar />\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n            <CircularProgress />\n          </Box>\n        </Container>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <AppBar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Stack spacing={3}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Audit Logs\n          </Typography>\n\n          {error && (\n            <Alert severity=\"error\" onClose={() => setError(null)}>\n              {error}\n            </Alert>\n          )}\n\n          {/* Filters */}\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Filters\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    label=\"Action\"\n                    value={filters.action}\n                    onChange={(e) => handleFilterChange('action', e.target.value)}\n                    fullWidth\n                    size=\"small\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    label=\"Object Table\"\n                    value={filters.object_table}\n                    onChange={(e) => handleFilterChange('object_table', e.target.value)}\n                    fullWidth\n                    size=\"small\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    label=\"Actor User ID\"\n                    value={filters.actor_user_id}\n                    onChange={(e) => handleFilterChange('actor_user_id', e.target.value)}\n                    fullWidth\n                    size=\"small\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    label=\"Start Date\"\n                    type=\"date\"\n                    value={filters.start_date}\n                    onChange={(e) => handleFilterChange('start_date', e.target.value)}\n                    fullWidth\n                    size=\"small\"\n                    InputLabelProps={{ shrink: true }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <TextField\n                    label=\"End Date\"\n                    type=\"date\"\n                    value={filters.end_date}\n                    onChange={(e) => handleFilterChange('end_date', e.target.value)}\n                    fullWidth\n                    size=\"small\"\n                    InputLabelProps={{ shrink: true }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Button \n                    variant=\"outlined\" \n                    onClick={() => {\n                      setFilters({\n                        action: \"\",\n                        object_table: \"\",\n                        actor_user_id: \"\",\n                        start_date: \"\",\n                        end_date: \"\"\n                      });\n                    }}\n                  >\n                    Clear Filters\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          {/* Audit Logs Table */}\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Audit Logs\n                {auditData && (\n                  <Chip \n                    label={`${auditData.pagination.total} total`} \n                    size=\"small\" \n                    sx={{ ml: 2 }}\n                  />\n                )}\n              </Typography>\n              \n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Time</TableCell>\n                      <TableCell>Action</TableCell>\n                      <TableCell>Object</TableCell>\n                      <TableCell>Actor</TableCell>\n                      <TableCell>IP</TableCell>\n                      <TableCell>Signature</TableCell>\n                      <TableCell>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {auditData?.audit_logs.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell>\n                          {new Date(log.created_at).toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Chip \n                            label={log.action} \n                            color={getActionColor(log.action) as any}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {log.object_table}\n                          </Typography>\n                          {log.object_id && (\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              ID: {log.object_id}\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {log.actor_role}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {log.actor_user_id}\n                          </Typography>\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {log.ip || 'N/A'}\n                          </Typography>\n                        </TableCell>\n                        <TableCell>\n                          {log.signature_valid ? (\n                            <CheckCircle color=\"success\" fontSize=\"small\" />\n                          ) : (\n                            <Error color=\"error\" fontSize=\"small\" />\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Tooltip title=\"View Changes\">\n                            <IconButton \n                              size=\"small\"\n                              onClick={() => handleViewDiff(log)}\n                            >\n                              <Visibility />\n                            </IconButton>\n                          </Tooltip>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              \n              {auditData && (\n                <TablePagination\n                  component=\"div\"\n                  count={auditData.pagination.total}\n                  page={page}\n                  onPageChange={handlePageChange}\n                  rowsPerPage={rowsPerPage}\n                  onRowsPerPageChange={handleRowsPerPageChange}\n                  rowsPerPageOptions={[25, 50, 100]}\n                />\n              )}\n            </CardContent>\n          </Card>\n        </Stack>\n\n        {/* Diff Dialog */}\n        <Dialog \n          open={showDiffDialog} \n          onClose={() => setShowDiffDialog(false)} \n          maxWidth=\"lg\" \n          fullWidth\n        >\n          <DialogTitle>\n            Audit Log Details\n            {selectedLog && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {selectedLog.action} on {selectedLog.object_table} at {new Date(selectedLog.created_at).toLocaleString()}\n              </Typography>\n            )}\n          </DialogTitle>\n          <DialogContent>\n            {selectedLog && (\n              <Stack spacing={3}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"h6\">Before</Typography>\n                    <Box \n                      component=\"pre\" \n                      sx={{ \n                        backgroundColor: 'grey.100', \n                        p: 2, \n                        borderRadius: 1,\n                        fontSize: '0.875rem',\n                        overflow: 'auto',\n                        maxHeight: '400px'\n                      }}\n                    >\n                      {formatJson(selectedLog.before)}\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"h6\">After</Typography>\n                    <Box \n                      component=\"pre\" \n                      sx={{ \n                        backgroundColor: 'grey.100', \n                        p: 2, \n                        borderRadius: 1,\n                        fontSize: '0.875rem',\n                        overflow: 'auto',\n                        maxHeight: '400px'\n                      }}\n                    >\n                      {formatJson(selectedLog.after)}\n                    </Box>\n                  </Grid>\n                </Grid>\n                \n                <Divider />\n                \n                <Typography variant=\"h6\">Metadata</Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Actor Role</Typography>\n                    <Typography variant=\"body1\">{selectedLog.actor_role}</Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Actor User ID</Typography>\n                    <Typography variant=\"body1\">{selectedLog.actor_user_id}</Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">IP Address</Typography>\n                    <Typography variant=\"body1\">{selectedLog.ip || 'N/A'}</Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">User Agent</Typography>\n                    <Typography variant=\"body1\" sx={{ wordBreak: 'break-word' }}>\n                      {selectedLog.user_agent || 'N/A'}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">Signature</Typography>\n                    <Typography variant=\"body1\" sx={{ wordBreak: 'break-all', fontSize: '0.75rem' }}>\n                      {selectedLog.signature}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Stack>\n            )}\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowDiffDialog(false)}>Close</Button>\n          </DialogActions>\n        </Dialog>\n      </Container>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/rsternke/permit-school/permit-school/web/src/app/admin/fulfillment/inventory/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchStock'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchStock, jCode]","fix":{"range":[1471,1478],"text":"[fetchStock, jCode]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid\n} from '@mui/material';\nimport {\n  Upload as UploadIcon,\n  Refresh as RefreshIcon,\n  Delete as DeleteIcon,\n  Warning as WarningIcon\n} from '@mui/icons-material';\n\ninterface InventoryStatus {\n  j_code: string;\n  total: number;\n  available: number;\n  used: number;\n  last_used_at: string | null;\n}\n\ninterface CertificateStock {\n  id: number;\n  j_code: string;\n  serial: string;\n  is_used: boolean;\n  used_by_certificate: string | null;\n  used_at: string | null;\n  note: string | null;\n  created_at: string;\n}\n\nexport default function InventoryPage() {\n  const [jCode, setJCode] = useState('CA');\n  const [inventory, setInventory] = useState<InventoryStatus[]>([]);\n  const [stock, setStock] = useState<CertificateStock[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [uploadFile, setUploadFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadResult, setUploadResult] = useState<any>(null);\n\n  useEffect(() => {\n    fetchInventory();\n    fetchStock();\n  }, [jCode]);\n\n  const fetchInventory = async () => {\n    try {\n      const response = await fetch('/api/admin/fulfillment/inventory');\n      if (response.ok) {\n        const data = await response.json();\n        setInventory(data.inventory || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch inventory:', error);\n    }\n  };\n\n  const fetchStock = async () => {\n    try {\n      const response = await fetch(`/api/admin/fulfillment/stock?j_code=${jCode}&limit=100`);\n      if (response.ok) {\n        const data = await response.json();\n        setStock(data.stock || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch stock:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!uploadFile) return;\n\n    setUploading(true);\n    setUploadResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('serials.csv', uploadFile);\n      formData.append('j_code', jCode);\n\n      const response = await fetch('/api/admin/fulfillment/stock/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n      setUploadResult(result);\n\n      if (result.success) {\n        fetchInventory();\n        fetchStock();\n        setUploadDialogOpen(false);\n        setUploadFile(null);\n      }\n    } catch (error) {\n      setUploadResult({ error: 'Upload failed' });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleBulkVoid = async (serials: string[]) => {\n    if (!confirm(`Are you sure you want to void ${serials.length} certificate serials?`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/admin/fulfillment/stock/void', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          j_code: jCode,\n          serials\n        }),\n      });\n\n      const result = await response.json();\n      if (result.success) {\n        fetchInventory();\n        fetchStock();\n      }\n    } catch (error) {\n      console.error('Bulk void failed:', error);\n    }\n  };\n\n  const currentInventory = inventory.find(inv => inv.j_code === jCode);\n\n  if (loading) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Certificate Inventory Management\n      </Typography>\n\n      {/* Inventory Summary */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">\n              Inventory Summary\n            </Typography>\n            <IconButton onClick={fetchInventory} size=\"small\">\n              <RefreshIcon />\n            </IconButton>\n          </Box>\n          \n          {currentInventory && (\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={3}>\n                <Chip \n                  label={`Total: ${currentInventory.total}`}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={3}>\n                <Chip \n                  label={`Available: ${currentInventory.available}`}\n                  color=\"success\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={3}>\n                <Chip \n                  label={`Used: ${currentInventory.used}`}\n                  color=\"info\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={3}>\n                <Chip \n                  label={`Last Used: ${currentInventory.last_used_at ? \n                    new Date(currentInventory.last_used_at).toLocaleDateString() : 'Never'}`}\n                  color=\"default\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n            </Grid>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Upload Controls */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n            <Typography variant=\"h6\">\n              Upload New Stock\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<UploadIcon />}\n              onClick={() => setUploadDialogOpen(true)}\n            >\n              Upload Serials\n            </Button>\n          </Box>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Upload a CSV file with a single column named &quot;serial&quot; containing the certificate serial numbers.\n          </Typography>\n        </CardContent>\n      </Card>\n\n      {/* Stock Table */}\n      <Card>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n            <Typography variant=\"h6\">\n              Certificate Stock\n            </Typography>\n            <FormControl sx={{ minWidth: 120 }}>\n              <InputLabel>Jurisdiction</InputLabel>\n              <Select\n                value={jCode}\n                onChange={(e) => setJCode(e.target.value)}\n                label=\"Jurisdiction\"\n                size=\"small\"\n              >\n                <MenuItem value=\"CA\">California (CA)</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n          \n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Serial</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Used By</TableCell>\n                  <TableCell>Used At</TableCell>\n                  <TableCell>Note</TableCell>\n                  <TableCell>Created</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {stock.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell>{item.serial}</TableCell>\n                    <TableCell>\n                      <Chip \n                        label={item.is_used ? 'Used' : 'Available'}\n                        color={item.is_used ? 'error' : 'success'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {item.used_by_certificate ? \n                        item.used_by_certificate.slice(0, 8) + '...' : \n                        '-'\n                      }\n                    </TableCell>\n                    <TableCell>\n                      {item.used_at ? \n                        new Date(item.used_at).toLocaleDateString() : \n                        '-'\n                      }\n                    </TableCell>\n                    <TableCell>{item.note || '-'}</TableCell>\n                    <TableCell>\n                      {new Date(item.created_at).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>\n                      {!item.is_used && (\n                        <Tooltip title=\"Void Serial\">\n                          <IconButton \n                            onClick={() => handleBulkVoid([item.serial])}\n                            size=\"small\"\n                            color=\"error\"\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n\n      {/* Upload Dialog */}\n      <Dialog \n        open={uploadDialogOpen} \n        onClose={() => setUploadDialogOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Upload Certificate Serials</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\n            Upload a CSV file with certificate serial numbers for {jCode}.\n          </Typography>\n          \n          <TextField\n            type=\"file\"\n            inputProps={{ accept: '.csv' }}\n            label=\"serials.csv\"\n            fullWidth\n            onChange={(e) => setUploadFile((e.target as HTMLInputElement).files?.[0] || null)}\n            sx={{ mb: 2 }}\n          />\n          \n          {uploadResult && (\n            <Alert \n              severity={uploadResult.error ? 'error' : 'success'} \n              sx={{ mt: 2 }}\n            >\n              {uploadResult.error || uploadResult.message || \n                `Upload completed: ${uploadResult.count} serials added`}\n            </Alert>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setUploadDialogOpen(false)}>\n            Cancel\n          </Button>\n          <Button \n            variant=\"contained\"\n            onClick={handleUpload}\n            disabled={!uploadFile || uploading}\n          >\n            {uploading ? 'Uploading...' : 'Upload'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/rsternke/permit-school/permit-school/web/src/app/admin/security/page.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":339,"column":19,"nodeType":"JSXOpeningElement","endLine":343,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Paper,\n  Typography,\n  Stack,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Box,\n  CircularProgress,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Grid,\n  Chip,\n  Divider,\n} from \"@mui/material\";\nimport AppBar from \"@/components/AppBar\";\n\ninterface MFASetup {\n  secret: string;\n  qr_code: string;\n  backup_codes: string[];\n}\n\ninterface SecurityStatus {\n  mfa_enabled: boolean;\n  last_auth_at: string;\n  session_age_minutes: number;\n}\n\nexport default function AdminSecurityPage() {\n  const [securityStatus, setSecurityStatus] = useState<SecurityStatus | null>(null);\n  const [mfaSetup, setMfaSetup] = useState<MFASetup | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [setupLoading, setSetupLoading] = useState(false);\n  const [verifyLoading, setVerifyLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [showSetupDialog, setShowSetupDialog] = useState(false);\n  const [showVerifyDialog, setShowVerifyDialog] = useState(false);\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [backupCode, setBackupCode] = useState(\"\");\n\n  useEffect(() => {\n    fetchSecurityStatus();\n  }, []);\n\n  const fetchSecurityStatus = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/security/status');\n      if (response.ok) {\n        const data = await response.json();\n        setSecurityStatus(data);\n      } else {\n        setError('Failed to load security status');\n      }\n    } catch (err) {\n      setError('Failed to load security status');\n      console.error('Security status error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSetupMFA = async () => {\n    try {\n      setSetupLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/admin/security/mfa/setup', {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setMfaSetup(data);\n        setShowSetupDialog(true);\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Failed to setup MFA');\n      }\n    } catch (err) {\n      setError('Failed to setup MFA');\n      console.error('MFA setup error:', err);\n    } finally {\n      setSetupLoading(false);\n    }\n  };\n\n  const handleVerifyMFA = async () => {\n    if (!verificationCode.trim() && !backupCode.trim()) {\n      setError('Please enter a verification code or backup code');\n      return;\n    }\n\n    try {\n      setVerifyLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/admin/security/mfa/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: verificationCode.trim() || backupCode.trim(),\n          is_backup_code: !!backupCode.trim()\n        })\n      });\n      \n      if (response.ok) {\n        setSuccess('MFA setup completed successfully!');\n        setShowSetupDialog(false);\n        setShowVerifyDialog(false);\n        setVerificationCode(\"\");\n        setBackupCode(\"\");\n        setMfaSetup(null);\n        fetchSecurityStatus(); // Refresh status\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Verification failed');\n      }\n    } catch (err) {\n      setError('Verification failed');\n      console.error('MFA verification error:', err);\n    } finally {\n      setVerifyLoading(false);\n    }\n  };\n\n  const handleDisableMFA = async () => {\n    if (!window.confirm('Are you sure you want to disable MFA? This will make your account less secure.')) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/admin/security/mfa/disable', {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        setSuccess('MFA disabled successfully');\n        fetchSecurityStatus();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Failed to disable MFA');\n      }\n    } catch (err) {\n      setError('Failed to disable MFA');\n      console.error('MFA disable error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleReauth = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/admin/security/reauth', {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        setSuccess('Re-authentication successful');\n        fetchSecurityStatus();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Re-authentication failed');\n      }\n    } catch (err) {\n      setError('Re-authentication failed');\n      console.error('Reauth error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <>\n        <AppBar />\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n            <CircularProgress />\n          </Box>\n        </Container>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <AppBar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Stack spacing={3}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Security Settings\n          </Typography>\n\n          {error && (\n            <Alert severity=\"error\" onClose={() => setError(null)}>\n              {error}\n            </Alert>\n          )}\n\n          {success && (\n            <Alert severity=\"success\" onClose={() => setSuccess(null)}>\n              {success}\n            </Alert>\n          )}\n\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Multi-Factor Authentication\n                  </Typography>\n                  \n                  {securityStatus && (\n                    <Stack spacing={2}>\n                      <Box>\n                        <Chip \n                          label={securityStatus.mfa_enabled ? \"Enabled\" : \"Disabled\"}\n                          color={securityStatus.mfa_enabled ? \"success\" : \"default\"}\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      \n                      {securityStatus.mfa_enabled ? (\n                        <Button \n                          variant=\"outlined\" \n                          color=\"error\"\n                          onClick={handleDisableMFA}\n                          disabled={loading}\n                        >\n                          Disable MFA\n                        </Button>\n                      ) : (\n                        <Button \n                          variant=\"contained\"\n                          onClick={handleSetupMFA}\n                          disabled={setupLoading}\n                        >\n                          {setupLoading ? <CircularProgress size={20} /> : \"Setup MFA\"}\n                        </Button>\n                      )}\n                    </Stack>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Session Status\n                  </Typography>\n                  \n                  {securityStatus && (\n                    <Stack spacing={2}>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Last Authentication\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          {new Date(securityStatus.last_auth_at).toLocaleString()}\n                        </Typography>\n                      </Box>\n                      \n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Session Age\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          {securityStatus.session_age_minutes} minutes\n                        </Typography>\n                      </Box>\n                      \n                      {securityStatus.session_age_minutes > 5 && (\n                        <Button \n                          variant=\"outlined\"\n                          onClick={handleReauth}\n                          disabled={loading}\n                        >\n                          Re-authenticate\n                        </Button>\n                      )}\n                    </Stack>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Security Information\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                Multi-factor authentication adds an extra layer of security to your account. \n                When enabled, you&apos;ll need to enter a code from your authenticator app in addition to your password.\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Your session is considered recent if you&apos;ve authenticated within the last 5 minutes. \n                Some sensitive admin actions may require re-authentication if your session is older.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Stack>\n\n        {/* MFA Setup Dialog */}\n        <Dialog open={showSetupDialog} onClose={() => setShowSetupDialog(false)} maxWidth=\"sm\" fullWidth>\n          <DialogTitle>Setup Multi-Factor Authentication</DialogTitle>\n          <DialogContent>\n            {mfaSetup && (\n              <Stack spacing={3}>\n                <Typography variant=\"body2\">\n                  Scan this QR code with your authenticator app (Google Authenticator, Authy, etc.):\n                </Typography>\n                \n                <Box display=\"flex\" justifyContent=\"center\">\n                  <img \n                    src={mfaSetup.qr_code} \n                    alt=\"MFA QR Code\" \n                    style={{ maxWidth: '200px', height: 'auto' }}\n                  />\n                </Box>\n                \n                <Typography variant=\"body2\">\n                  Or enter this secret manually: <code>{mfaSetup.secret}</code>\n                </Typography>\n                \n                <Divider />\n                \n                <Typography variant=\"h6\">Backup Codes</Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Save these backup codes in a secure location. You can use them to access your account if you lose your authenticator device.\n                </Typography>\n                \n                <Box>\n                  {mfaSetup.backup_codes.map((code, index) => (\n                    <Chip \n                      key={index} \n                      label={code} \n                      variant=\"outlined\" \n                      sx={{ m: 0.5 }}\n                    />\n                  ))}\n                </Box>\n                \n                <Typography variant=\"body2\" color=\"warning.main\">\n                  ⚠️ Save these codes now - they won&apos;t be shown again!\n                </Typography>\n              </Stack>\n            )}\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowSetupDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => {\n                setShowSetupDialog(false);\n                setShowVerifyDialog(true);\n              }}\n              variant=\"contained\"\n            >\n              Next: Verify Setup\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/* MFA Verification Dialog */}\n        <Dialog open={showVerifyDialog} onClose={() => setShowVerifyDialog(false)} maxWidth=\"sm\" fullWidth>\n          <DialogTitle>Verify MFA Setup</DialogTitle>\n          <DialogContent>\n            <Stack spacing={3}>\n              <Typography variant=\"body2\">\n                Enter the 6-digit code from your authenticator app to complete the setup:\n              </Typography>\n              \n              <TextField\n                label=\"Verification Code\"\n                value={verificationCode}\n                onChange={(e) => setVerificationCode(e.target.value)}\n                placeholder=\"123456\"\n                inputProps={{ maxLength: 6 }}\n                fullWidth\n              />\n              \n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Or use a backup code:\n              </Typography>\n              \n              <TextField\n                label=\"Backup Code\"\n                value={backupCode}\n                onChange={(e) => setBackupCode(e.target.value)}\n                placeholder=\"Enter backup code\"\n                fullWidth\n              />\n            </Stack>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowVerifyDialog(false)}>Cancel</Button>\n            <Button \n              onClick={handleVerifyMFA}\n              variant=\"contained\"\n              disabled={verifyLoading || (!verificationCode.trim() && !backupCode.trim())}\n            >\n              {verifyLoading ? <CircularProgress size={20} /> : \"Verify & Complete\"}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Container>\n    </>\n  );\n}\n","usedDeprecatedRules":[]}]

info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules
